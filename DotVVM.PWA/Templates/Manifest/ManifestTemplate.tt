<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".json" #>

{
<#if(!string.IsNullOrWhiteSpace(Options.Name)) {#>
  "name": "<#=Options.Name#>",
<#} #>
<#if(!string.IsNullOrWhiteSpace(Options.ShortName)) {#>
  "short_name": "<#=Options.ShortName#>",
<#} #>
<#if(!string.IsNullOrWhiteSpace(Options.Scope)) {#>
  "scope": "<#=Options.Scope#>",
<#} #>
<#if(!string.IsNullOrWhiteSpace(Options.StartUrl)) {#>
  "start_url": "<#=Options.StartUrl#>",
<#} #>
  "display": "<#=Options.Display.ToManifestValue()#>",
<#if(!string.IsNullOrWhiteSpace(Options.BackgroundColor)) {#>
  "background_color": "<#=Options.BackgroundColor#>",
<#} #>
<#if(!string.IsNullOrWhiteSpace(Options.ThemeColor)) {#>
  "theme_color": "<#=Options.ThemeColor#>",
<#} #>
<#if(Options.Categories?.Any() == true) {#>
  "categories": [<#=string.Join(", ", Options.Categories.Select(c => $"\"{c}\""))#>],
<#} #>
<#if(!string.IsNullOrWhiteSpace(Options.Description)) {#>
  "description": "<#=Options.Description#>",
<#} #>
  "dir": "<#=Options.Dir.ToManifestValue()#>",
<#if(!string.IsNullOrWhiteSpace(Options.IarcRatingId)) {#>
  "iarc_rating_id": "<#=Options.IarcRatingId#>",
<#} #>
<#if(!string.IsNullOrWhiteSpace(Options.Lang)) {#>
  "lang": "<#=Options.Lang#>",
<#} #>
  "orientation ": "<#=Options.Orientation.ToManifestValue()#>",
  "prefer_related_applications ": <#=Options.PreferRelatedApplications.ToString().ToLower()#>,
  "icons": [
<#for(var i = 0; i < Options.Icons.Length; i++) {#>
    {
<#if(Options.Icons[i].Purposes?.Any() == true) {#>
      "purpose": "<#=string.Join(" ", Options.Icons[i].Purposes.Select(p => p.ToManifestValue()))#>",
<#} #>
      "src": "<#=Options.Icons[i].Src#>",
      "type": "<#=Options.Icons[i].Type#>",
      "sizes": "<#=Options.Icons[i].Sizes#>"
<#if(i == Options.Icons.Length - 1) {#>
    }
<#} else {#>
    },
<#}#>
<#}#>
  ]
}

<#+ public ManifestOptions Options { get; set; } #>
